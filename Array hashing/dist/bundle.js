!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(1);const o=n(2);function r(e,t){const n=new o.Timeline("Compare two arrays"),r=i(e),s=i(t);n.mark("HashXY");const c=l(r),a=l(s);n.mark("Cumsum hash");const h=u(r),f=u(s);n.mark("Cummult hash");const g=function(e,t){if(e.length!==t.length)throw new Error("Arrays must be of same length");let n=0,o=!1,r=0,s=0;for(r=0;r<e.length;r++){for(n=e[r],o=!1,s=0;s<t.length;s++)if(t[s]===n){o=!0;break}if(!o)return!1}return!0}(r,s);n.mark("Elementwise hash compare"),n.end(),console.log("cumSum equal: ",c==a),console.log("cumMult equal: ",h==f),console.log("Elementwise xyhash equal: ",g),console.log(n.TIMES)}function s(e,t,n=1){const o=new Uint16Array(2*e);for(let e=0;e<=o.length;e+=2){const r=e/o.length*360*n,s=e/o.length*t/2,i=Math.cos(r/(2*Math.PI))*s+t/2,l=Math.sin(r/(2*Math.PI))*s+t/2;o[e]=i,o[e+1]=l}return o}function i(e){const t=new Uint32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=(n=e[r],o=e[r+1],65536*n+o);var n,o;return t}function l(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function u(e){let t=1n;for(let n=0;n<e.length;n++)t*=BigInt(e[n]);return t}console.log("STARTING ARRAY HASHING TEST"),async function(){let e,t;const n=Math.floor(5e3);console.log("Array sizes: ",1e4),console.log("\n Testing indexwise equal XY sets..."),e=s(1e4,1e4),t=s(1e4,1e4),r(e,t),console.log("\n Testing non-indexwise equal XY sets..."),e=s(1e4,1e4);for(let n=0;n<e.length-2;n+=2)t[n]=e[n+2],t[n+1]=e[n+2+1];t[t.length-2]=e[0],t[t.length-1]=e[1],r(e,t),console.log("\n Testing different XY sets..."),e=s(1e4,1e4),t=s(1e4,10001),r(e,t),console.log("\n Testing sets one element different..."),e=s(1e4,1e4),(t=s(1e4,1e4))[n]=999,r(e,t),console.log("\n Testing sets two elements different..."),e=s(1e4,1e4),(t=s(1e4,1e4))[n]=999,t[n+1]=-999,r(e,t)}()},function(e,t,n){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Timeline=class{constructor(e){this.NAME=e,this.TIMES=new Map,this.START_TIME=Date.now(),this.PREVIOUS_TIME=Date.now(),this.RUN_DURATION=0}mark(e){this.TIMES.set(e,Date.now()-this.PREVIOUS_TIME),this.RUN_DURATION+=Date.now()-this.PREVIOUS_TIME,this.PREVIOUS_TIME=Date.now()}get(e){const t=this.TIMES.get(e);return null!==t?t:"null"}setLogThereshold(e){this.LOG_TO_CONSOLE_THRESHOLD=e}end(e=!1){this.END_TIME=Date.now(),this.RUN_DURATION=this.END_TIME-this.START_TIME,this.TIMES.set("TOTAL",this.RUN_DURATION),e?console.log(this.NAME,this.TIMES):this.LOG_TO_CONSOLE_THRESHOLD&&this.RUN_DURATION>this.LOG_TO_CONSOLE_THRESHOLD&&console.log(this.NAME,this.TIMES)}},t.hexToRGB=function(e){"#"===e[0]&&(e=e.slice(1));var t=parseInt(e,16);return[t>>16&255,t>>8&255,255&t]},t.rgbToHex=function(e,t,n){return"#"+((1<<24)+(e<<16)+(t<<8)+n).toString(16).slice(1)},t.randomRGB=function(){return[Math.floor(255*Math.random()),Math.floor(255*Math.random()),Math.floor(255*Math.random())]},t.setTimeoutPromise=function(e){return new Promise((t,n)=>{setTimeout(()=>t(),e)})};const o=new class{constructor(){this.Log=new Map,this.CONSOLE_EL=document.getElementById("console")}log(e,t){this.Log.set(e,t)}time(e,t){this.Log.set(e+" ms",Math.round(t)),t>100&&console.log(e+" : "+t)}printLogToConsole(){const e=this.CONSOLE_EL.getElementsByClassName("log").item(0);if(e){e.innerHTML="";for(let t of this.Log){let n=t[1];if(!n)continue;const o=document.createElement("div"),r=document.createElement("span"),s=document.createElement("span");r.innerHTML=t[0].toString(),s.innerHTML=n.toString(),o.append(r,s),o.className="entry",e.append(o)}}}};t.LOGGER=o}]);